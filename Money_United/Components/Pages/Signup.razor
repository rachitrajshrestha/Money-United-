@inject NavigationManager NavManager
@page "/"


<div class="con">
	<form>
		<header>
			<h2>Login</h2>
			<p>Please enter your credentials</p>
		</header>

		<div class="input-item">
			<label for="userName">Username:</label>
			<input class="form-input" id="txt-input" type="text" @bind=userName placeholder="username"  />
		</div>

		<div class="input-item">
			<label for="Password">Password:</label>
			<input class="form-input" id="txt-input" type="text" @bind=password placeholder="password"  />
		</div>

		<div class="input-item">
			<label for="currency">Currency:</label>
			<select class="form-input" @bind="currency" required>
				@foreach (var Currency in Enum.GetNames(typeof(typeClass.Currency)))
				{
					<option value="@Currency">@Currency</option>
				}
			</select>
		</div>

		<div class="submits">
			<button type="submit" class="log-in" @onclick="OnSubmit">Submit</button>
		</div>
	</form>
</div>

@code {
	// Variables for username, password, and selected currency
	public string userName;
	public string password;
	public string currency;


	public void OnSubmit()
	{
		try
		{
			Initialize_Database dbInitializer = new Initialize_Database();
			dbInitializer.DatabaseChecker();

			// Validate login credentials for 'admin'
			if (userName.Equals("admin") && password.Equals("admin"))
			{
				List.ClearInflow();
				List.ClearOutflow();
				List.ClearDebt();
				List.ClearTags();
				Controller controller = new Controller();
				controller.SelectInflow();
				controller.SelectOutflow();
				controller.SelectDebt();
				controller.selectTags();
				controller.SelectAmount();
				NavManager.NavigateTo("/home");
			}
			else
			{
				// Handle incorrect credentials
				Console.WriteLine("Invalid username or password.");
			}
		}
		catch (Exception ex)
		{
			// Log the error and provide feedback
			Console.WriteLine($"An error occurred: {ex.Message}");
		}

	}
}