@page "/Outflows"
<form>
    <h3>Outflows</h3>

    <p><strong>Total Outflows: </strong>@outflowTotalAmount</p>

    <label for="amount">Amount:</label>
    <input type="text" @bind=amount />

    <label for="source">Source:</label>
    <input type="text" @bind=source />

    <label for="tags">Tags:</label>
    <select @bind="usertags">
        @foreach (var tag in List.Tags)
        {
            <option value="@tag.tags">@tag.tags</option>
        }
    </select>

    <label for="type">Type:</label>
    <select @bind="type">
        @foreach (var Outflows in Enum.GetNames(typeof(typeClass.Outflows)))
        {
            <option value="@Outflows">@Outflows</option>
        }
    </select>

    <label for="date">Date:</label>
    <input type="dateOnly" @bind=date />

    <label for="note">Note:</label>
    <input type="text" @bind=note />

    @if (submitMessage)
    {
        <p>Your outflow has been recorded successfully.</p>
    }

    @if (errorMessage != null)
    {
        <p style="color: red;">@errorMessage</p>
    }

    <input type="submit" @onclick=AddBalance value="Submit" />
</form>

@code {
    // Variables to store form data and total outflows
    public int amount;
    public string source;
    public string type;
    public DateOnly date;
    public string usertags;
    public string note;
    private double outflowTotalAmount = 0;
    private bool submitMessage = false;
    private string errorMessage;

    List<OutflowTrans> income = new List<OutflowTrans>();

    protected override void OnInitialized()
    {
        List.ClearTags();
        Controller controller = new Controller();
        controller.selectTags();
        CalculateTotalOutflows();
        submitMessage = false;
    }

    // Method to calculate total outflows
    private void CalculateTotalOutflows()
    {
        outflowTotalAmount = 0;
        foreach (var outflow in List.Outflows)
        {
            outflowTotalAmount += outflow.amount;
        }
    }

    // Method to add a new outflow record
    public void AddBalance()
    {
        List.ClearOutflow();
        Controller controller = new Controller();
        controller.SelectOutflow();
        CalculateTotalOutflows();

        // Check if the outflow amount exceeds the user's balance
        if (amount > List.user.amount)
        {
            errorMessage = "Insufficient balance to record this outflow.";
            submitMessage = false;
        }
        else
        {
            // Proceed with the database insert if the balance is sufficient
            DatabaseInsert insertList = new DatabaseInsert();
            insertList.LogOutflow(1, amount, source, date, type, usertags, note);
            insertList.DecrementAmount(1, amount);
            insertList.CloseDatabase();

            controller.SelectAmount();

            errorMessage = null; // Clear any previous error messages
            submitMessage = true;
        }
    }
}
